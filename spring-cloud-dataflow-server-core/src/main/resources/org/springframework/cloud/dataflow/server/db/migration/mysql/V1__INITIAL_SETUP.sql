create table APP_REGISTRATION (
    id bigint not null,
    object_Version bigint,
    default_Version bit,
    metadata_Uri longtext,
    name varchar(255),
    type integer,
    uri longtext,
    version varchar(255),
    primary key (id)
);

create table AUDIT_RECORDS (
    id bigint not null,
    audit_Action bigint NOT NULL,
    audit_data longtext,
    audit_Operation bigint NOT NULL,
    correlation_id varchar(255),
    created_by varchar(255),
    created_On datetime,
    primary key (id)
);

create table hibernate_sequence (
    next_val bigint
);

insert into hibernate_sequence(next_val) select * from (select 1) as tmp where not exists ( select next_val from hibernate_sequence) limit 1;

CREATE TABLE URI_REGISTRY  (
    NAME VARCHAR(255) NOT NULL PRIMARY KEY,
    URI VARCHAR(255) NOT NULL
);

CREATE TABLE DEPLOYMENT_IDS  (
    DEPLOYMENT_KEY VARCHAR(255) NOT NULL PRIMARY KEY,
    DEPLOYMENT_ID VARCHAR(255) NOT NULL
);

CREATE TABLE STREAM_DEFINITIONS  (
    DEFINITION_NAME VARCHAR(255) NOT NULL PRIMARY KEY,
    DEFINITION TEXT DEFAULT NULL
);

CREATE TABLE STREAM_DEPLOYMENTS  (
    STREAM_NAME VARCHAR(255) NOT NULL PRIMARY KEY,
    DEPLOYMENT_PROPS VARCHAR(1000)
);

CREATE TABLE TASK_DEFINITIONS  (
    DEFINITION_NAME VARCHAR(255) NOT NULL PRIMARY KEY,
    DEFINITION TEXT DEFAULT NULL
);

CREATE TABLE BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID BIGINT NOT NULL PRIMARY KEY,
    VERSION BIGINT,
    JOB_NAME VARCHAR(100) NOT NULL,
    JOB_KEY VARCHAR(32) NOT NULL,
    constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
);

CREATE TABLE BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    VERSION BIGINT,
    JOB_INSTANCE_ID BIGINT NOT NULL,
    CREATE_TIME DATETIME NOT NULL,
    START_TIME DATETIME DEFAULT NULL,
    END_TIME DATETIME DEFAULT NULL,
    STATUS VARCHAR(10),
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED DATETIME,
    JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
    constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
    references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS (
    JOB_EXECUTION_ID BIGINT NOT NULL,
    TYPE_CD VARCHAR(6) NOT NULL,
    KEY_NAME VARCHAR(100) NOT NULL,
    STRING_VAL VARCHAR(250),
    DATE_VAL DATETIME DEFAULT NULL,
    LONG_VAL BIGINT,
    DOUBLE_VAL DOUBLE PRECISION,
    IDENTIFYING CHAR(1) NOT NULL,
    constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
    references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    VERSION BIGINT NOT NULL,
    STEP_NAME VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL,
    START_TIME DATETIME NOT NULL,
    END_TIME DATETIME DEFAULT NULL,
    STATUS VARCHAR(10),
    COMMIT_COUNT BIGINT,
    READ_COUNT BIGINT,
    FILTER_COUNT BIGINT,
    WRITE_COUNT BIGINT,
    READ_SKIP_COUNT BIGINT,
    WRITE_SKIP_COUNT BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT BIGINT,
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED DATETIME,
    constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
    references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
    references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
    JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
    references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
    ID BIGINT NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL,
    constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
);

INSERT INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_STEP_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
    ID BIGINT NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL,
    constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
);

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_SEQ (
    ID BIGINT NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL,
    constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
);

INSERT INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_SEQ);

CREATE TABLE TASK_EXECUTION  (
    TASK_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    START_TIME DATETIME DEFAULT NULL,
    END_TIME DATETIME DEFAULT NULL,
    TASK_NAME  VARCHAR(100),
    EXIT_CODE INTEGER,
    EXIT_MESSAGE VARCHAR(2500),
    ERROR_MESSAGE VARCHAR(2500),
    LAST_UPDATED TIMESTAMP,
    EXTERNAL_EXECUTION_ID VARCHAR(255),
    PARENT_EXECUTION_ID BIGINT
);

CREATE TABLE TASK_EXECUTION_PARAMS  (
    TASK_EXECUTION_ID BIGINT NOT NULL,
    TASK_PARAM VARCHAR(2500),
    constraint TASK_EXEC_PARAMS_FK foreign key (TASK_EXECUTION_ID)
    references TASK_EXECUTION(TASK_EXECUTION_ID)
);

CREATE TABLE TASK_TASK_BATCH (
    TASK_EXECUTION_ID BIGINT NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL,
    constraint TASK_EXEC_BATCH_FK foreign key (TASK_EXECUTION_ID)
    references TASK_EXECUTION(TASK_EXECUTION_ID)
);

CREATE TABLE TASK_SEQ (
    ID BIGINT NOT NULL,
    UNIQUE_KEY CHAR(1) NOT NULL,
    constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
);

INSERT INTO TASK_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp;

CREATE TABLE TASK_LOCK (
    LOCK_KEY CHAR(36),
    REGION VARCHAR(100),
    CLIENT_ID CHAR(36),
    CREATED_DATE DATETIME(6) NOT NULL,
    constraint LOCK_PK primary key (LOCK_KEY, REGION)
);

CREATE INDEX AUDIT_RECORDS_AUDIT_ACTION_IDX ON AUDIT_RECORDS (audit_Action) ;
CREATE INDEX AUDIT_RECORDS_AUDIT_OPERATION_IDX ON AUDIT_RECORDS (audit_Operation) ;
CREATE INDEX AUDIT_RECORDS_CORRELATION_ID_IDX ON AUDIT_RECORDS (correlation_id) ;
CREATE INDEX AUDIT_RECORDS_CREATED_ON_IDX ON AUDIT_RECORDS (created_On) ;
CREATE INDEX BATCH_JOB_EXECUTION_PARAMS_JOB_EXECUTION_ID_IDX ON BATCH_JOB_EXECUTION_PARAMS (JOB_EXECUTION_ID) ;
CREATE INDEX TASK_EXECUTION_PARAMS_TASK_EXECUTION_ID_IDX ON TASK_EXECUTION_PARAMS (TASK_EXECUTION_ID) ;
CREATE INDEX BATCH_JOB_INSTANCE_JOB_KEY_IDX ON BATCH_JOB_INSTANCE (JOB_KEY,JOB_NAME) ;
CREATE INDEX BATCH_STEP_EXECUTION_JOB_EXECUTION_ID_IDX ON BATCH_STEP_EXECUTION (JOB_EXECUTION_ID) ;
